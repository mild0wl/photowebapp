// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PhotoWebApp.Data;

#nullable disable

namespace PhotoWebApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PhotoWebApp.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Flagged")
                        .HasColumnType("bit");

                    b.Property<int>("PhotoId")
                        .HasColumnType("int");

                    b.Property<string>("commentValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("commentValue");

                    b.HasKey("CommentId");

                    b.HasIndex(new[] { "PhotoId" }, "IX_Comment_PhotoId");

                    b.ToTable("Comment");

                    b.HasData(
                        new
                        {
                            CommentId = 1,
                            DatePosted = new DateTime(2016, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Flagged = true,
                            PhotoId = 1,
                            commentValue = "Comment1"
                        },
                        new
                        {
                            CommentId = 2,
                            DatePosted = new DateTime(2016, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Flagged = false,
                            PhotoId = 2,
                            commentValue = "Comment2"
                        });
                });

            modelBuilder.Entity("PhotoWebApp.Models.Photo", b =>
                {
                    b.Property<int>("photoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("photoId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("photoId"));

                    b.Property<bool>("CommentMode")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<int>("LikesCount")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("photoTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("photoTitle");

                    b.Property<string>("tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("tags");

                    b.Property<int>("userId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("photoId");

                    b.HasIndex("userId");

                    b.ToTable("Photo");

                    b.HasData(
                        new
                        {
                            photoId = 1,
                            CommentMode = true,
                            DatePosted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPublic = true,
                            LikesCount = 200,
                            description = "description 1",
                            photoTitle = "Photo 1",
                            tags = "#tag1",
                            userId = 2
                        },
                        new
                        {
                            photoId = 2,
                            CommentMode = false,
                            DatePosted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPublic = false,
                            LikesCount = 10,
                            description = "description 2",
                            photoTitle = "Photo 2",
                            tags = "#tag2",
                            userId = 2
                        });
                });

            modelBuilder.Entity("PhotoWebApp.Models.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "admin@photowebapp.com",
                            Role = 1,
                            Token = "abcdefgh",
                            TokenExpiry = new DateTime(2016, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "ccuser@photowebapp.com",
                            Role = 2,
                            Token = "abcdefgh",
                            TokenExpiry = new DateTime(2016, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "ccuser"
                        });
                });

            modelBuilder.Entity("PhotoWebApp.Models.Comment", b =>
                {
                    b.HasOne("PhotoWebApp.Models.Photo", "Photo")
                        .WithMany("Comment")
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("PhotoWebApp.Models.Photo", b =>
                {
                    b.HasOne("PhotoWebApp.Models.Users", "User")
                        .WithMany("Photos")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PhotoWebApp.Models.Photo", b =>
                {
                    b.Navigation("Comment");
                });

            modelBuilder.Entity("PhotoWebApp.Models.Users", b =>
                {
                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
